{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","placeholder","required","onChange","onBlur","useState","Math","random","toFixed","slice","id","touched","setTouched","hasError","htmlFor","type","classNames","event","target","NewMovie","onSubmit","count","setCount","setTitle","setDescription","setImgUrl","setImdbUrl","setImdbId","switchButton","setSwitchButton","handleInputChange","trim","useEffect","preventDefault","newValue","disabled","App","moviesFromServer","setMovies","newMovie","currentMovie","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.08c529ca.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n  onBlur?: (newValue: boolean) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => {},\n  onBlur = () => {},\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setTouched] = useState(false);\n  const hasError = touched && required && !value;\n\n  const handleBlur = () => {\n    if (onBlur) {\n      onBlur(true);\n    }\n\n    setTouched(true);\n  };\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={handleBlur}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onSubmit: (post: Movie) => void;\n};\n\nexport const NewMovie: React.FC<Props> = ({ onSubmit }) => {\n  // Increase the count after successful form submission\n  // to reset touched status of all the `Field`s\n  const [count, setCount] = useState(0);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n  const [switchButton, setSwitchButton] = useState(true);\n\n  const handleInputChange = () => {\n    if (title && imgUrl && imdbUrl && imdbId) {\n      setSwitchButton(false);\n      title.trim();\n      description.trim();\n      imgUrl.trim();\n      imdbUrl.trim();\n      imdbId.trim();\n    } else {\n      setSwitchButton(true);\n    }\n  };\n\n  const handleBlur = () => {\n    if (!title || !imgUrl || !imdbUrl || !imdbId || !description) {\n      setSwitchButton(true);\n    }\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    onSubmit({\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    });\n\n    setCount(count + 1);\n  };\n\n  useEffect(() => {\n    if (count > 0) {\n      setTitle('');\n      setDescription('');\n      setImgUrl('');\n      setImdbUrl('');\n      setImdbId('');\n    }\n  }, [count]);\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleSubmit}\n      onBlur={handleBlur}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={(newValue) => {\n          setTitle(newValue);\n          handleInputChange();\n        }}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={(newValue) => setDescription(newValue)}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={(newValue) => {\n          setImgUrl(newValue);\n          handleInputChange();\n        }}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={(newValue) => {\n          setImdbUrl(newValue);\n          handleInputChange();\n        }}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={(newValue) => {\n          setImdbId(newValue);\n          handleInputChange();\n        }}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={switchButton}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>(moviesFromServer);\n  const addMovie = (newMovie:Movie) => {\n    setMovies(currentMovie => [...currentMovie, newMovie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onSubmit={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}